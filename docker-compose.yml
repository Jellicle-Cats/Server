version: "3.4"

services:
    mysql-booking:
        image: mysql:latest
        restart: always
        environment:
            MYSQL_DATABASE: booking
            MYSQL_USER: user
            MYSQL_PASSWORD: password
            MYSQL_ROOT_PASSWORD: password
        ports:
            - "3308:3306"
        volumes:
            - my-db-booking:/var/lib/mysql-booking

    booking-service:
        image: watcharavit/software-architecture:booking-service-1.0 #Change if you build a new image from github
        environment:
            DATABASE_URL: mysql://root:password@mysql-booking:3306/booking
            gRPC_URL: 0.0.0.0:30043
        ports:
            - 30043:30043
        depends_on:
            - mysql-booking

    zookeeper:
        hostname: zookeeper
        image: wurstmeister/zookeeper:3.4.6
        expose:
            - "2181"
        ports:
            - "2181:2181"

    kafka:
        image: wurstmeister/kafka
        env_file:
            - kafka/kafka-variables.env
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
            - "8082:8082"
            - "8083:8083"

    consumer:
        image: rynparin/attendance-service-consumer #Change if you build a new image from github
        depends_on:
            - kafka
            - zookeeper
            - booking-service
        environment:
            - KAFKA_SERVERS=kafka:9092
            - BOOKING_SERVER=booking-service:30043
        restart: always

    producer:
        image: rynparin/attendance-service-producer #Change if you build a new image from github
        depends_on:
            - kafka
            - zookeeper
            - consumer
        environment:
            - KAFKA_SERVERS=kafka:9092
        ports:
            - "3456:3456"
        restart: always

    mysql-seat:
        image: mysql:latest
        restart: always
        environment:
            MYSQL_DATABASE: seat
            MYSQL_USER: user
            MYSQL_PASSWORD: password
            MYSQL_ROOT_PASSWORD: password
        ports:
            - "3307:3306"
        volumes:
            - my-db-seat:/var/lib/mysql-seat

    seat-service:
        image: nonroute/seatservice:1.0 #Change if you build a new image from github
        environment:
            NODE_ENV: production
            DATABASE_URL: mysql://root:password@mysql-seat:3306/seat
            USER_SERVICE_ENDPOINT: user-service:8080
        ports:
            - 3001:3001
        depends_on:
            - mysql-seat

    user-service:
        image: theerachot/user-service #Change if you build a new image from github
        environment:
            GOOGLE_OAUTH_CLIENT_ID: #ADD YOUR GOOGLE_OAUTH_CLIENT_ID, NEED TO BE THE SAME AS FRONTEND
            GOOGLE_OAUTH_CLIENT_SECRET: #ADD YOUR GOOGLE_OAUTH_CLIENT_SECRET
            REDIRECT_URL: http://localhost:8080/api/sessions/oauth/google
            MONGO_URL: #ADD YOUR MONGO_URL here
            JWT_SECRET: ThisIsMySecret
            BOOKING_SERVER: booking-service:30043
        ports:
            - 8080:8080

    kong-database:
        image: postgres:9.6
        container_name: kong-postgres
        restart: on-failure
        networks:
            - kong-net
        volumes:
            - kong_data:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: kong
            POSTGRES_PASSWORD: kong
            POSTGRES_DB: kong
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "kong"]
            interval: 30s
            timeout: 30s
            retries: 3

    kong-migration:
        image: kong:latest
        depends_on:
            - kong-database
        command: kong migrations bootstrap
        networks:
            - kong-net
        restart: on-failure
        environment:
            KONG_DATABASE: postgres
            KONG_PG_HOST: kong-database
            KONG_PG_DATABASE: kong
            KONG_PG_USER: kong
            KONG_PG_PASSWORD: kong

    kong:
        image: kong:latest
        restart: on-failure
        networks:
            - kong-net
        environment:
            KONG_DATABASE: postgres
            KONG_PG_HOST: kong-database
            KONG_PG_DATABASE: kong
            KONG_PG_USER: kong
            KONG_PG_PASSWORD: kong
            KONG_PROXY_ACCESS_LOG: /dev/stdout
            KONG_ADMIN_ACCESS_LOG: /dev/stdout
            KONG_PROXY_ERROR_LOG: /dev/stderr
            KONG_ADMIN_ERROR_LOG: /dev/stderr
            KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
            KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:9080 http2, 0.0.0.0:9081 http2 ssl"
        depends_on:
            - kong-database
        healthcheck:
            test: ["CMD", "kong", "health"]
            interval: 10s
            timeout: 10s
            retries: 10
        ports:
            - "8000:8000"
            - "8001:8001"
            - "8443:8443"
            - "8444:8444"
            - "9080:9080"
            - "9081:9081"

    konga-prepare:
        image: pantsel/konga:latest
        command: "-c prepare -a postgres -u postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga"
        networks:
            - kong-net
        restart: on-failure
        depends_on:
            - kong-database

    konga:
        image: pantsel/konga
        networks:
            - kong-net
        depends_on:
            - kong-database
        environment:
            DB_ADAPTER: postgres
            DB_HOST: kong-database
            DB_URI: postgresql://kong:kong@kong-database:5432/konga
            KONGA_HOOK_TIMEOUT: 120000
            NODE_ENV: production
        ports:
            - "1337:1337"

    grpc-proxy:
        image: soulcrysis/grpc-web-react #Change if you build a new image from github
        ports:
            - "8085:8085"
            - "9901:9901"

networks:
    kong-net:
        driver: bridge

volumes:
    my-db-booking:
    my-db-seat:
    kong_data:
